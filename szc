#!/usr/bin/env python

import os
import sys
import random
import argparse
from distutils import util

parser = argparse.ArgumentParser(description="Stabilizer Compiler Driver")

# Which randomizations should be run
parser.add_argument('-R', action='append', choices=['code', 'heap', 'stack', 'link'])

# Driver control arguments
parser.add_argument('-v', action='store_true')
parser.add_argument('-lang', choices=['c', 'c++', 'fortran'])
parser.add_argument('-platform', choices=['auto', 'linux', 'osx'], default='auto')
parser.add_argument('-frontend', choices=['gcc', 'clang'], default='gcc')

# Compiler pass-through arguments
parser.add_argument('-c', action='store_true')
parser.add_argument('-o')
parser.add_argument('-O', type=int, default=2)
parser.add_argument('-g', action='store_true')
parser.add_argument('-f', action='append', default=[])
parser.add_argument('-D', action='append', default=[])
parser.add_argument('-L', action='append', default=[])
parser.add_argument('-I', action='append', default=[])
parser.add_argument('-l', action='append', default=[])
parser.add_argument('input', nargs='+')

# Do the parse
args = parser.parse_args()

# Populate the 'auto' platform selection
if args.platform == 'auto':
	if util.get_platform().startswith('macosx'):
		args.platform = 'osx'
	elif util.get_platform().startswith('linux'):
		args.platform = 'linux'
	else:
		print 'Unsupported platform: '+util.get_platform()
		exit(2)

STABILIZER_HOME = os.path.dirname(__file__)

if args.platform == 'osx':
	LIBSUFFIX = 'dylib'
else:
	LIBSUFFIX = 'so'

opts = []

args.l.append('stdc++')
args.f.append('PIC')
args.f.append('no-omit-frame-pointer')
#args.v = True

if 'code' in args.R:
	opts.append('lower-intrinsics')
	opts.append('lowerswitch')
	opts.append('lowerinvoke')
	opts.append('stabilize-code')

if 'stack' in args.R:
	opts.append('stabilize-stack')

if 'heap' in args.R:
	opts.append('stabilize-heap')

if 'code' in args.R or 'heap' in args.R or 'stack' in args.R:
	args.L.append(STABILIZER_HOME)
	args.l.append('stabilizer')
	opts.append('stabilize')

def compile(i):
	if i.endswith('.o') or i.endswith('.bc'):
		return i

	if args.frontend == 'gcc' or args.lang == 'fortran':
		cmd = 'gcc -fplugin=dragonegg -S -fplugin-arg-dragonegg-emit-ir'
		cmd += ' -o '+args.o+'.s'
	else:
		cmd = 'clang -c -emit-llvm'
		cmd += ' -o '+args.o+'.bc'

	cmd += ' -O0'

	if args.g:
		cmd += ' -g'

	for I in args.I:
		cmd += ' -I'+I
	
	for f in args.f:
		cmd += ' -f'+f

	for D in args.D:
		cmd += ' -D'+D

	cmd += ' '+i

	if args.v:
		print cmd
	os.system(cmd)

	if args.frontend == 'gcc':
		cmd = 'llvm-as -o '+args.o+'.bc '+args.o+'.s'
		if args.v:
			print cmd
		os.system(cmd)

	return args.o+'.bc'

def transform(i):
	if i.endswith('.o') or i.endswith('.opt.bc'):
		return i

	cmd = 'opt'
		
	cmd += ' -o='+args.o+'.opt.bc'

	if args.O > 0:
		cmd += ' -O'+str(args.O)

	cmd += ' -load='+STABILIZER_HOME+'/LLVMStabilizer.'+LIBSUFFIX

	for opt in opts:
		cmd += ' -'+opt

	cmd += ' '+i

	if args.v:
		print cmd
	os.system(cmd)

	return args.o+'.opt.bc'

def link(inputs):
	if args.lang == 'fortran':
		cmd = 'gfortran -O0'
	elif args.frontend == 'gcc':
		cmd = 'gcc -O0'
	elif args.frontend == 'clang':
		cmd = 'clang -O0'

	if args.g:
		cmd += ' -g'

	if args.c:
		cmd += ' -c'
	else:
		for L in args.L:
			cmd += ' -L'+L
		
		for l in args.l:
			cmd += ' -l'+l

	cmd += ' -o '+args.o
	
	for f in args.f:
		cmd += ' -f'+f

	if 'link' in args.R:
		random.shuffle(inputs)
		print 'Random link order:', ' '.join(inputs)
	
	cmd += ' '+' '.join(inputs)

	if args.v:
		print cmd
	os.system(cmd)

	return args.o

# Build up program arguments
bytecode_files = map(compile, args.input)
transformed = map(transform, bytecode_files)
link(transformed)

